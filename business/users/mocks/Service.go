// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	personal_data "Daily-Calorie-App-API/business/personal_data"

	mock "github.com/stretchr/testify/mock"

	users "Daily-Calorie-App-API/business/users"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CountCalories provides a mock function with given fields: userData, personalData
func (_m *Service) CountCalories(userData *users.Domain, personalData *personal_data.Domain) (float64, error) {
	ret := _m.Called(userData, personalData)

	var r0 float64
	if rf, ok := ret.Get(0).(func(*users.Domain, *personal_data.Domain) float64); ok {
		r0 = rf(userData, personalData)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*users.Domain, *personal_data.Domain) error); ok {
		r1 = rf(userData, personalData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: id
func (_m *Service) DeleteUser(id int) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditUser provides a mock function with given fields: id, user, personalData
func (_m *Service) EditUser(id int, user *users.Domain, personalData *personal_data.Domain) (*users.Domain, error) {
	ret := _m.Called(id, user, personalData)

	var r0 *users.Domain
	if rf, ok := ret.Get(0).(func(int, *users.Domain, *personal_data.Domain) *users.Domain); ok {
		r0 = rf(id, user, personalData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *users.Domain, *personal_data.Domain) error); ok {
		r1 = rf(id, user, personalData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmailAvailable provides a mock function with given fields: email
func (_m *Service) EmailAvailable(email string) (bool, error) {
	ret := _m.Called(email)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUser provides a mock function with given fields:
func (_m *Service) GetAllUser() (*[]users.Domain, error) {
	ret := _m.Called()

	var r0 *[]users.Domain
	if rf, ok := ret.Get(0).(func() *[]users.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]users.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: id
func (_m *Service) GetUserByID(id int) (*users.Domain, error) {
	ret := _m.Called(id)

	var r0 *users.Domain
	if rf, ok := ret.Get(0).(func(int) *users.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *Service) Login(email string, password string) (string, error) {
	ret := _m.Called(email, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: userData, personalData
func (_m *Service) RegisterUser(userData *users.Domain, personalData *personal_data.Domain) (*users.Domain, error) {
	ret := _m.Called(userData, personalData)

	var r0 *users.Domain
	if rf, ok := ret.Get(0).(func(*users.Domain, *personal_data.Domain) *users.Domain); ok {
		r0 = rf(userData, personalData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*users.Domain, *personal_data.Domain) error); ok {
		r1 = rf(userData, personalData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
