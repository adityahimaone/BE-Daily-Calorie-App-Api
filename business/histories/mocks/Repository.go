// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	histories "Daily-Calorie-App-API/business/histories"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAllHistoryByUserID provides a mock function with given fields: userID
func (_m *Repository) GetAllHistoryByUserID(userID int) (*[]histories.Domain, error) {
	ret := _m.Called(userID)

	var r0 *[]histories.Domain
	if rf, ok := ret.Get(0).(func(int) *[]histories.Domain); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoriesByID provides a mock function with given fields: id
func (_m *Repository) GetHistoriesByID(id int) (*histories.Domain, error) {
	ret := _m.Called(id)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(int) *histories.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoriesByUserIDandDate provides a mock function with given fields: userID, date
func (_m *Repository) GetHistoriesByUserIDandDate(userID int, date string) (*histories.Domain, error) {
	ret := _m.Called(userID, date)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(int, string) *histories.Domain); ok {
		r0 = rf(userID, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(userID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastHistoryByUserID provides a mock function with given fields: userID
func (_m *Repository) GetLastHistoryByUserID(userID int) (*histories.Domain, error) {
	ret := _m.Called(userID)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(int) *histories.Domain); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0
func (_m *Repository) Insert(_a0 *histories.Domain) (*histories.Domain, error) {
	ret := _m.Called(_a0)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(*histories.Domain) *histories.Domain); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*histories.Domain) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, _a1
func (_m *Repository) Update(id int, _a1 *histories.Domain) (*histories.Domain, error) {
	ret := _m.Called(id, _a1)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(int, *histories.Domain) *histories.Domain); ok {
		r0 = rf(id, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *histories.Domain) error); ok {
		r1 = rf(id, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTotalCalories provides a mock function with given fields: id, totalCalories
func (_m *Repository) UpdateTotalCalories(id int, totalCalories float64) (*histories.Domain, error) {
	ret := _m.Called(id, totalCalories)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(int, float64) *histories.Domain); ok {
		r0 = rf(id, totalCalories)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, float64) error); ok {
		r1 = rf(id, totalCalories)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTotalFood provides a mock function with given fields: id, totalFood
func (_m *Repository) UpdateTotalFood(id int, totalFood int) (*histories.Domain, error) {
	ret := _m.Called(id, totalFood)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(int, int) *histories.Domain); ok {
		r0 = rf(id, totalFood)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, totalFood)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTotalHistoriesDetail provides a mock function with given fields: id
func (_m *Repository) UpdateTotalHistoriesDetail(id int) (*histories.Domain, error) {
	ret := _m.Called(id)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(int) *histories.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWater provides a mock function with given fields: id, water
func (_m *Repository) UpdateWater(id int, water *histories.Domain) (*histories.Domain, error) {
	ret := _m.Called(id, water)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(int, *histories.Domain) *histories.Domain); ok {
		r0 = rf(id, water)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *histories.Domain) error); ok {
		r1 = rf(id, water)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
