// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	foods "Daily-Calorie-App-API/business/foods"
	histories "Daily-Calorie-App-API/business/histories"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateHistories provides a mock function with given fields: _a0
func (_m *Service) CreateHistories(_a0 *histories.Domain) (*histories.Domain, error) {
	ret := _m.Called(_a0)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(*histories.Domain) *histories.Domain); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*histories.Domain) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHistoriesFromAPI provides a mock function with given fields: _a0, food
func (_m *Service) CreateHistoriesFromAPI(_a0 *histories.Domain, food *foods.Domain) (*histories.Domain, error) {
	ret := _m.Called(_a0, food)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(*histories.Domain, *foods.Domain) *histories.Domain); ok {
		r0 = rf(_a0, food)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*histories.Domain, *foods.Domain) error); ok {
		r1 = rf(_a0, food)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWater provides a mock function with given fields: _a0
func (_m *Service) CreateWater(_a0 *histories.Domain) (*histories.Domain, error) {
	ret := _m.Called(_a0)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(*histories.Domain) *histories.Domain); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*histories.Domain) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHistoriesDetail provides a mock function with given fields: historiesDetailID
func (_m *Service) DeleteHistoriesDetail(historiesDetailID int) (string, error) {
	ret := _m.Called(historiesDetailID)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(historiesDetailID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(historiesDetailID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllHistoryByUserID provides a mock function with given fields: userID
func (_m *Service) GetAllHistoryByUserID(userID int) (*[]histories.Domain, error) {
	ret := _m.Called(userID)

	var r0 *[]histories.Domain
	if rf, ok := ret.Get(0).(func(int) *[]histories.Domain); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoriesByID provides a mock function with given fields: userID
func (_m *Service) GetHistoriesByID(userID int) (*histories.Domain, error) {
	ret := _m.Called(userID)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(int) *histories.Domain); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoriesByUserIDandDate provides a mock function with given fields: userID
func (_m *Service) GetHistoriesByUserIDandDate(userID int) (*histories.Domain, error) {
	ret := _m.Called(userID)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(int) *histories.Domain); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastHistoryByUserID provides a mock function with given fields: userID
func (_m *Service) GetLastHistoryByUserID(userID int) (*histories.Domain, error) {
	ret := _m.Called(userID)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(int) *histories.Domain); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTotalCalories provides a mock function with given fields: historiesID, totalCalories
func (_m *Service) UpdateTotalCalories(historiesID int, totalCalories float64) (*histories.Domain, error) {
	ret := _m.Called(historiesID, totalCalories)

	var r0 *histories.Domain
	if rf, ok := ret.Get(0).(func(int, float64) *histories.Domain); ok {
		r0 = rf(historiesID, totalCalories)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*histories.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, float64) error); ok {
		r1 = rf(historiesID, totalCalories)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
