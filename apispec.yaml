openapi: 3.0.0
info:
  description: |
    Track your calories everyday
  version: "1.0.0"
  title:  Aplikasi Daily Calorie
servers:
  - url: 'https://localhost:8080/'
tags:
  - name: user
    description: user resource
  - name: food
    description: food resource
  - name: histories
    description: histories resource
  - name: calories
    description: calories resource
  - name: admin
    description: admin resource
paths:
  /food:
    post:
      tags:
        - food
      summary: Add a new Food
      operationId: addFood
      responses:
        '405':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
        required: true
    get:
      tags:
        - food
      summary: Get all Food
      operationId: getFood
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food_List'
  '/food/{id}':
    get:
      tags:
        - food
      summary: Find Food by ID
      description: Returns a single Food
      operationId: getFoodById
      parameters:
        - name: id
          in: path
          description: ID of food to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
        '400':
          description: Invalid ID supplied
        '404':
          description: Food not found
    put:
      tags:
        - food
      summary: Update an existing Food
      operationId: updateFood
      parameters:
        - name: id
          in: path
          description: ID of food to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID
        '404':
          description: Food not found
        '405':
          description: Validation exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
        required: true
    delete:
      tags:
        - food
      summary: Delete Food
      description: This can only be done by the logged in user.
      operationId: deleteFood
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete Success
        '400':
          description: Invalid Id
        '404':
          description: Food not found
  '/food/{name}':
    get:
      tags:
        - food
      summary: Find Food by Name
      description: Returns a single Food
      operationId: getFoodByName
      parameters:
        - name: name
          in: path
          description: Name of food to return
          required: true
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
        '400':
          description: Invalid Name
        '404':
          description: Food not found
  /users/register:
    post:
      tags:
        - user
      summary: Register user
      description: For Register New User
      operationId: createUser
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_Success'
        '404':
          description: invalid register

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /users/login:
    post:
      tags:
        - user
      summary: Login User
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            Bearer-Token:
              description: JWT Auth
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        '400':
          description: Invalid username/password supplied
  '/users/{id}':
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - user
      summary: Get user by ID (Using JWT Auth)
      operationId: getUserByName
      parameters:
        - name: id
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            Bearer-Token:
              description: JWT Auth
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - user
      summary: Updated user (Using JWT Auth)
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Delete
          headers:
            Bearer-Token:
              description: JWT Auth
              schema:
                type: string
                format: date-time
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete User
      description: This can only be done by the logged in admin.
      operationId: deleteFood
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete Success
        '400':
          description: Invalid Id
        '404':
          description: User not found
  /histories:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - histories
      summary: Create Histories
      description: This can only be done by the logged in user.
      operationId: createHistorie
      responses:
        '200':
          description: successful
          headers:
            Bearer-Token:
              description: JWT Auth
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Historie'
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: nasi padang
        description: Created user Historie
        required: true
  /histories/user:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - histories
      summary: Get All Histories By User
      description: This can only be done by the logged in user.
      operationId: getAllHistorie
      responses:
        '200':
          description: successful
          headers:
            Bearer-Token:
              description: JWT Auth
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Histories_List'
  /histories/stat:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - histories
      summary: Get Stat By User
      description: This can only be done by the logged in user.
      operationId: getStat
      responses:
        '200':
          description: successful
          headers:
            Bearer-Token:
              description: JWT Auth
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_stat'
  /calorie:
    post:
      tags:
        - calories
      summary: Count Calorie
      description: This can only be done by the logged in user.
      operationId: createCalorie
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_Calorie'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Calorie'
        description: Created user object
        required: true
  /calorie/save:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - calories
      summary: Save Calorie (Insert/Update)
      description: This can only be done by the logged in user.
      operationId: saveCalorie
      responses:
        '200':
          description: successful operation
          headers:
            Bearer-Token:
              description: JWT Auth
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_Calorie'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Calorie'
        description: Created user object
        required: true
  /calorie/user:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - calories
      summary: Get Calorie By User ID
      description: This can only be done by the logged in user.
      operationId: getCalorie
      responses:
        '200':
          description: successful operation
          headers:
            Bearer-Token:
              description: JWT Auth
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_Calorie'
externalDocs:
  description: Find out more about Swagger
  url: 'https://swagger.io'
components:
  schemas:
    User:
      properties:
        email:
          type: string
          example: budi@mail.com
        password:
          type: string
          example: secret
        fullname:
          type: string
          example: budi luhut
        gender:
          type: string
          example: male
        height:
          type: integer
          example: 170
        weight:
          type: integer
          example: 60
    Food:
      type: object
      properties:
        id:
          type: integer
          format: uuid
          example: 15
        name:
          type: integer
          example: Bakso
        photo:
          type: string
          example: bakso.jpg
        calorie:
          type: integer
          example: 351
        created_at:
          type: string
          format: timestamp
          example: '124123413'
        updated_at:
          type: string
          format: timestamp
          example: '124123413'
    Food_List:
      type: "array"
      items:
        $ref: "#/components/schemas/Food"
      example:
        - id: 1
          name: Bakso
          image: bakso.jpg
          calorie: 254.10
          created_at: '124123413'
          updated_at: '124123413'
        - id: 2
          name: Sate
          image: sate.jpg
          calorie: 350.21
          created_at: '124123413'
          updated_at: '124123413'
    Login:
      type: object
      properties:
        id:
          type: integer
          format: uuid
          example: 15
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzIyMTU5ODUsInVzZXJpZCI6MTF9.N72CvB3ffoZKvntUC4MAtDPpzQTQjIfzvnNSTNBuC7A
    Historie:
      properties:
        id:
          type: integer
          format: uuid
          example: 15
        user_id:
          type: integer
          example: 12
        name_user:
          type: string
          example: opung luhut
        food_id:
          type: integer
          example: 12
        food_name:
          type: string
          example: Sate
        calorie:
          type: integer
          example: 500
        date:
          type: string
          format: date
          example: '7102021'
        created_at:
          type: string
          format: timestamp
          example: '124123413'
        updated_at:
          type: string
          format: timestamp
          example: '124123413'
    Histories_List:
      type: "array"
      items:
        $ref: "#/components/schemas/Historie"
      example:
        - id: 1
          user_id: 15
          name_user: opung luhut
          food_id: 1
          calorie: 210
          food_name: nasi padang
          date: '7102021'
          created_at: '124123413'
          updated_at: '124123413'
        - id: 2
          user_id: 15
          name_user: opung luhut
          food_id: 2
          calorie: 351
          food_name: bakso
          date: '7102021'
          created_at: '124123413'
          updated_at: '124123413'
    Calorie:
      properties:
        id:
          type: integer
          format: uuid
          example: 10
        weight:
          type: integer
          example: 50
        height:
          type: integer
          example: 165
        age:
          type: integer
          example: 25
        activity:
          type: integer
          example: 2
    User_stat:
      properties:
        calorie_need:
          type: integer
          example: 1328.125
        calorie_current:
          type: integer
          example: 1200
        percentage:
          type: string
          example: 85%
        status:
          type: string
          example: cukup
    Response_Calorie:
      properties:
        user_id:
          type: integer
          example: 1
        result_calorie:
          type: integer
          example: 2210
    Meta_Success:
      properties:
        Message:
          type: string
          example: Data Berhasil
        Status:
          type: string
          example: Success
        Code:
          type: integer
          example: 200
    Response_Success_Register:
      properties:
        Meta:
          type: object
          example: {
            "Message": "Data Berhasil",
            "Status": "Success",
            "Code": 200
          }
        Data:
          type: object
          example: {
            "fullname": "budi luhut",
            "email": "budi@mail.com",
            "gender": "male"
              "weight": 60
              "height": 170
          }
    Response_Failed_Register:
      properties:
        Meta:
          type: object
          example: {
            "Message": "Data Berhasil",
            "Status": "Success",
            "Code": 200
          }
        Data:
          type: object
          example: {}
  requestBodies:
    Food:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Food'
      description: Food object that needs to be added
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT